services:
  # FastAPI backend service
  api:
    depends_on:
      db:
        condition: service_healthy
    build:
      context: ..
      dockerfile: api/Dockerfile.prod
    env_file:
      - .env                      # this is deploy/.env
    environment:
      - PYTHONPATH=/app
      - PORT=8000
      - UVICORN_WORKERS=1
      - APP_MODULE=main:app
      - UVICORN_RELOAD=
      - DATABASE_URL=postgresql+psycopg2://trainsAdmin:${POSTGRES_PASSWORD}@db:5432/trains
    expose:
      - "8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  # PostgreSQL database
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: trains
      POSTGRES_USER: trainsAdmin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-brokentrack}
    volumes:
      - dbdata:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trainsAdmin -d trains || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 20s

  # React frontend service
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    expose:
      - "80"
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    build:
      context: ../nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "8080:80"  # Alternative port for development
    depends_on:
      - api
      - frontend
    restart: unless-stopped

volumes:
  dbdata: