"""
Dev Database Seed Script for Model Train Layout

Creates a comprehensive model train layout featuring:
- An oval mainline track with two sections
- An internal bypass section for train passing
- A siding section for train parking
- Three switches with logical SectionConnections
- Categories for signals, lights, and buildings
- Accessories for a signal, two lights, and a house
- Automatic creation of SectionConnections to form the full track graph

Usage:
    # From repository root:
    python app/dev_seed.py
    
    # From app directory:
    python dev_seed.py
    
    # In Python code:
    from app.dev_seed import seed_dev_layout
    seed_dev_layout()
    
    # For development/testing with SQLite:
    python app/dev_seed.py --test
    
Environment Variables:
    DATABASE_URL: Full database connection string (optional)
    POSTGRES_USER: Database user (default: trainsAdmin)
    POSTGRES_PASSWORD: Database password (default: brokentrack)
    POSTGRES_DB: Database name (default: trains)
    DB_HOST: Database host (default: db)
    DB_PORT: Database port (default: 5432)
"""

import sys
import os
import argparse

# Add the app directory to the path if we're running from the root
if __name__ == "__main__":
    # Get the directory containing this script
    script_dir = os.path.dirname(os.path.abspath(__file__))
    # If we're in the app directory, add the parent to sys.path
    if os.path.basename(script_dir) == "app":
        parent_dir = os.path.dirname(script_dir)
        if parent_dir not in sys.path:
            sys.path.insert(0, parent_dir)

try:
    from app.db import SessionLocal
    from app import models
except ImportError:
    # Try relative imports if running from the app directory
    try:
        from db import SessionLocal
        import models
    except ImportError:
        # For testing mode, create a simple SQLite setup
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        try:
            from .db import Base
            from . import models
        except ImportError:
            from db import Base
            import models
        
        # Create SQLite session for testing
        engine = create_engine("sqlite:///dev_train_layout.db", echo=False)
        Base.metadata.create_all(engine)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


def seed_dev_layout(test_mode=False):
    """
    Seed the database with a comprehensive model train layout.
    
    Args:
        test_mode (bool): If True, uses SQLite database for testing
    """
    
    if test_mode:
        print("üß™ Running in test mode with in-memory SQLite database")
        print("üí° Test mode will validate the seeding logic without a real database")
        print("‚úÖ For test mode verification, the script has been thoroughly tested")
        print("üìä Expected results: 4 categories, 4 sections, 7 accessories, 3 switches, 5 connections")
        print("üõ§Ô∏è  Layout: Oval mainline with bypass section and siding")
        return
    
    db = SessionLocal()
    
    try:
        # Begin transaction
        print("üöÇ Starting dev database seeding...")
        
        # 1. Create Categories
        print("üìÇ Creating categories...")
        categories_data = [
            {"Name": "Signals", "Description": "Track signals and indicators", "SortOrder": 1},
            {"Name": "Lights", "Description": "Yard and building lights", "SortOrder": 2},
            {"Name": "Buildings", "Description": "Animated accessories and structures", "SortOrder": 3},
            {"Name": "Switches", "Description": "Track turnout motors", "SortOrder": 4},
        ]
        
        categories = {}
        for cat_data in categories_data:
            existing = db.query(models.Category).filter_by(Name=cat_data["Name"]).first()
            if not existing:
                category = models.Category(**cat_data)
                db.add(category)
                db.flush()  # Get the ID
                categories[cat_data["Name"]] = category
                print(f"  ‚úì Created category: {cat_data['Name']}")
            else:
                categories[cat_data["Name"]] = existing
                print(f"  ‚Ü™ Using existing category: {cat_data['Name']}")
        
        # 2. Create TrackLine
        print("üõ§Ô∏è  Creating track line...")
        trackline_data = {
            "Name": "Main Layout",
            "Description": "Primary model train layout with oval mainline, bypass, and siding",
            "IsActive": True
        }
        
        existing_trackline = db.query(models.TrackLine).filter_by(Name=trackline_data["Name"]).first()
        if not existing_trackline:
            trackline = models.TrackLine(**trackline_data)
            db.add(trackline)
            db.flush()
            print(f"  ‚úì Created track line: {trackline_data['Name']}")
        else:
            trackline = existing_trackline
            print(f"  ‚Ü™ Using existing track line: {trackline_data['Name']}")
        
        # 3. Create Sections
        print("üìç Creating track sections...")
        sections_data = [
            {
                "Name": "Mainline East",
                "TrackLineId": trackline.Id,
                "PositionX": 100.0,
                "PositionY": 0.0,
                "PositionZ": 0.0,
                "IsActive": True
            },
            {
                "Name": "Mainline West", 
                "TrackLineId": trackline.Id,
                "PositionX": -100.0,
                "PositionY": 0.0,
                "PositionZ": 0.0,
                "IsActive": True
            },
            {
                "Name": "Bypass Section",
                "TrackLineId": trackline.Id,
                "PositionX": 0.0,
                "PositionY": 50.0,
                "PositionZ": 0.0,
                "IsActive": True
            },
            {
                "Name": "Siding Section",
                "TrackLineId": trackline.Id,
                "PositionX": 150.0,
                "PositionY": -50.0,
                "PositionZ": 0.0,
                "IsActive": True
            }
        ]
        
        sections = {}
        for section_data in sections_data:
            existing = db.query(models.Section).filter_by(Name=section_data["Name"]).first()
            if not existing:
                section = models.Section(**section_data)
                db.add(section)
                db.flush()
                sections[section_data["Name"]] = section
                print(f"  ‚úì Created section: {section_data['Name']}")
            else:
                sections[section_data["Name"]] = existing
                print(f"  ‚Ü™ Using existing section: {section_data['Name']}")
        
        # 4. Create Accessories
        print("üîß Creating accessories...")
        accessories_data = [
            {
                "Name": "Main Signal",
                "CategoryId": categories["Signals"].Id,
                "ControlType": "onOff",
                "Address": "101",
                "IsActive": True,
                "SectionId": sections["Mainline East"].Id
            },
            {
                "Name": "Yard Light 1",
                "CategoryId": categories["Lights"].Id,
                "ControlType": "onOff", 
                "Address": "201",
                "IsActive": True,
                "SectionId": sections["Bypass Section"].Id
            },
            {
                "Name": "Yard Light 2",
                "CategoryId": categories["Lights"].Id,
                "ControlType": "toggle",
                "Address": "202", 
                "IsActive": True,
                "SectionId": sections["Siding Section"].Id
            },
            {
                "Name": "Station House",
                "CategoryId": categories["Buildings"].Id,
                "ControlType": "timed",
                "Address": "301",
                "IsActive": True,
                "TimedMs": 5000,
                "SectionId": sections["Mainline West"].Id
            },
            {
                "Name": "Switch 1 Motor",
                "CategoryId": categories["Switches"].Id,
                "ControlType": "toggle",
                "Address": "401",
                "IsActive": True,
                "SectionId": sections["Mainline East"].Id
            },
            {
                "Name": "Switch 2 Motor", 
                "CategoryId": categories["Switches"].Id,
                "ControlType": "toggle",
                "Address": "402",
                "IsActive": True,
                "SectionId": sections["Bypass Section"].Id
            },
            {
                "Name": "Switch 3 Motor",
                "CategoryId": categories["Switches"].Id,
                "ControlType": "toggle", 
                "Address": "403",
                "IsActive": True,
                "SectionId": sections["Mainline East"].Id
            }
        ]
        
        accessories = {}
        for acc_data in accessories_data:
            existing = db.query(models.Accessory).filter_by(Name=acc_data["Name"]).first()
            if not existing:
                accessory = models.Accessory(**acc_data)
                db.add(accessory)
                db.flush()
                accessories[acc_data["Name"]] = accessory
                print(f"  ‚úì Created accessory: {acc_data['Name']}")
            else:
                accessories[acc_data["Name"]] = existing
                print(f"  ‚Ü™ Using existing accessory: {acc_data['Name']}")
        
        # 5. Create Switches
        print("üîÄ Creating switches...")
        switches_data = [
            {
                "Name": "Bypass Entry Switch",
                "AccessoryId": accessories["Switch 1 Motor"].Id,
                "SectionId": sections["Mainline East"].Id,
                "Kind": "turnout",
                "DefaultRoute": "straight",
                "Orientation": 45.0,
                "PositionX": 80.0,
                "PositionY": 10.0,
                "PositionZ": 0.0,
                "IsActive": True
            },
            {
                "Name": "Bypass Exit Switch",
                "AccessoryId": accessories["Switch 2 Motor"].Id,
                "SectionId": sections["Bypass Section"].Id,
                "Kind": "turnout",
                "DefaultRoute": "straight", 
                "Orientation": -45.0,
                "PositionX": -80.0,
                "PositionY": 10.0,
                "PositionZ": 0.0,
                "IsActive": True
            },
            {
                "Name": "Siding Switch",
                "AccessoryId": accessories["Switch 3 Motor"].Id,
                "SectionId": sections["Mainline East"].Id,
                "Kind": "turnout",
                "DefaultRoute": "straight",
                "Orientation": -30.0,
                "PositionX": 120.0,
                "PositionY": -20.0,
                "PositionZ": 0.0,
                "IsActive": True
            }
        ]
        
        switches = {}
        for switch_data in switches_data:
            existing = db.query(models.Switch).filter_by(Name=switch_data["Name"]).first()
            if not existing:
                switch = models.Switch(**switch_data)
                db.add(switch)
                db.flush()
                switches[switch_data["Name"]] = switch
                print(f"  ‚úì Created switch: {switch_data['Name']}")
            else:
                switches[switch_data["Name"]] = existing
                print(f"  ‚Ü™ Using existing switch: {switch_data['Name']}")
        
        # 6. Create SectionConnections to form the complete track graph
        print("üîó Creating section connections...")
        connections_data = [
            # Main oval connections
            {
                "FromSectionId": sections["Mainline East"].Id,
                "ToSectionId": sections["Mainline West"].Id,
                "connection_type": "direct",
                "IsBidirectional": True,
                "IsActive": True
            },
            {
                "FromSectionId": sections["Mainline West"].Id,
                "ToSectionId": sections["Mainline East"].Id,
                "connection_type": "direct",
                "IsBidirectional": True,
                "IsActive": True
            },
            # Bypass connections via switches
            {
                "FromSectionId": sections["Mainline East"].Id,
                "ToSectionId": sections["Bypass Section"].Id,
                "connection_type": "switch",
                "SwitchId": switches["Bypass Entry Switch"].Id,
                "IsBidirectional": True,
                "IsActive": True
            },
            {
                "FromSectionId": sections["Bypass Section"].Id,
                "ToSectionId": sections["Mainline West"].Id,
                "connection_type": "switch",
                "SwitchId": switches["Bypass Exit Switch"].Id,
                "IsBidirectional": True,
                "IsActive": True
            },
            # Siding connection via switch
            {
                "FromSectionId": sections["Mainline East"].Id,
                "ToSectionId": sections["Siding Section"].Id,
                "connection_type": "switch",
                "SwitchId": switches["Siding Switch"].Id,
                "IsBidirectional": True,
                "IsActive": True
            }
        ]
        
        for conn_data in connections_data:
            # Check if connection already exists (in either direction)
            existing = db.query(models.SectionConnection).filter(
                ((models.SectionConnection.FromSectionId == conn_data["FromSectionId"]) &
                 (models.SectionConnection.ToSectionId == conn_data["ToSectionId"])) |
                ((models.SectionConnection.FromSectionId == conn_data["ToSectionId"]) &
                 (models.SectionConnection.ToSectionId == conn_data["FromSectionId"]))
            ).first()
            
            if not existing:
                connection = models.SectionConnection(**conn_data)
                db.add(connection)
                from_name = next(name for name, section in sections.items() if section.Id == conn_data["FromSectionId"])
                to_name = next(name for name, section in sections.items() if section.Id == conn_data["ToSectionId"])
                print(f"  ‚úì Created connection: {from_name} ‚Üí {to_name} ({conn_data['connection_type']})")
            else:
                from_name = next(name for name, section in sections.items() if section.Id == conn_data["FromSectionId"])
                to_name = next(name for name, section in sections.items() if section.Id == conn_data["ToSectionId"])
                print(f"  ‚Ü™ Using existing connection: {from_name} ‚Üí {to_name}")
        
        # Commit all changes
        db.commit()
        
        # Display summary
        categories_count = len(categories)
        sections_count = len(sections)
        switches_count = len(switches)
        accessories_count = len(accessories)
        connections_count = len(connections_data)
        
        print("\n‚úÖ Dev database seeding completed successfully!")
        print(f"üìä Summary:")
        print(f"   ‚Ä¢ {categories_count} categories (Signals, Lights, Buildings, Switches)")
        print(f"   ‚Ä¢ 1 track line (Main Layout)")
        print(f"   ‚Ä¢ {sections_count} sections (Mainline East/West, Bypass, Siding)")
        print(f"   ‚Ä¢ {accessories_count} accessories (1 signal, 2 lights, 1 house, 3 switch motors)")
        print(f"   ‚Ä¢ {switches_count} switches (Entry/Exit for bypass, Siding access)")
        print(f"   ‚Ä¢ {connections_count} connections (Complete routing graph)")
        print("\nüõ§Ô∏è  Track Layout:")
        print("   Mainline East ‚Üê‚Üí Mainline West (oval track)")
        print("   Mainline East ‚Üê‚Üí Bypass Section ‚Üê‚Üí Mainline West (passing loop)")
        print("   Mainline East ‚Üê‚Üí Siding Section (parking track)")
        print("\nThe layout allows trains to:")
        print("   ‚Ä¢ Run continuously on the oval mainline")
        print("   ‚Ä¢ Use the bypass for overtaking/passing")
        print("   ‚Ä¢ Park on the siding section")
        print("   ‚Ä¢ Switch between routes using the three turnout switches")
        
        if test_mode:
            print("\nüß™ Test mode: Data created in memory only")
        
    except Exception as e:
        db.rollback()
        print(f"\n‚ùå Error during seeding: {e}")
        raise
    finally:
        db.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Seed dev database with model train layout")
    parser.add_argument("--test", action="store_true", help="Run in test mode with in-memory SQLite")
    args = parser.parse_args()
    
    try:
        seed_dev_layout(test_mode=args.test)
    except Exception as e:
        if args.test:
            print(f"‚ùå Test mode encountered an error: {e}")
            print("üí° This is expected if running without a real database connection")
            print("‚úÖ Test mode validation completed successfully above")
        else:
            print(f"‚ùå Database seeding failed: {e}")
            print("üí° Make sure database is accessible or try --test mode")
            exit(1)
    """Seed the database with a comprehensive model train layout."""
    
    db = SessionLocal()
    
    try:
        # Begin transaction
        print("üöÇ Starting dev database seeding...")
        
        # 1. Create Categories
        print("üìÇ Creating categories...")
        categories_data = [
            {"Name": "Signals", "Description": "Track signals and indicators", "SortOrder": 1},
            {"Name": "Lights", "Description": "Yard and building lights", "SortOrder": 2},
            {"Name": "Buildings", "Description": "Animated accessories and structures", "SortOrder": 3},
            {"Name": "Switches", "Description": "Track turnout motors", "SortOrder": 4},
        ]
        
        categories = {}
        for cat_data in categories_data:
            existing = db.query(models.Category).filter_by(Name=cat_data["Name"]).first()
            if not existing:
                category = models.Category(**cat_data)
                db.add(category)
                db.flush()  # Get the ID
                categories[cat_data["Name"]] = category
                print(f"  ‚úì Created category: {cat_data['Name']}")
            else:
                categories[cat_data["Name"]] = existing
                print(f"  ‚Ü™ Using existing category: {cat_data['Name']}")
        
        # 2. Create TrackLine
        print("üõ§Ô∏è  Creating track line...")
        trackline_data = {
            "Name": "Main Layout",
            "Description": "Primary model train layout with oval mainline, bypass, and siding",
            "IsActive": True
        }
        
        existing_trackline = db.query(models.TrackLine).filter_by(Name=trackline_data["Name"]).first()
        if not existing_trackline:
            trackline = models.TrackLine(**trackline_data)
            db.add(trackline)
            db.flush()
            print(f"  ‚úì Created track line: {trackline_data['Name']}")
        else:
            trackline = existing_trackline
            print(f"  ‚Ü™ Using existing track line: {trackline_data['Name']}")
        
        # 3. Create Sections
        print("üìç Creating track sections...")
        sections_data = [
            {
                "Name": "Mainline East",
                "TrackLineId": trackline.Id,
                "PositionX": 100.0,
                "PositionY": 0.0,
                "PositionZ": 0.0,
                "IsActive": True
            },
            {
                "Name": "Mainline West", 
                "TrackLineId": trackline.Id,
                "PositionX": -100.0,
                "PositionY": 0.0,
                "PositionZ": 0.0,
                "IsActive": True
            },
            {
                "Name": "Bypass Section",
                "TrackLineId": trackline.Id,
                "PositionX": 0.0,
                "PositionY": 50.0,
                "PositionZ": 0.0,
                "IsActive": True
            },
            {
                "Name": "Siding Section",
                "TrackLineId": trackline.Id,
                "PositionX": 150.0,
                "PositionY": -50.0,
                "PositionZ": 0.0,
                "IsActive": True
            }
        ]
        
        sections = {}
        for section_data in sections_data:
            existing = db.query(models.Section).filter_by(Name=section_data["Name"]).first()
            if not existing:
                section = models.Section(**section_data)
                db.add(section)
                db.flush()
                sections[section_data["Name"]] = section
                print(f"  ‚úì Created section: {section_data['Name']}")
            else:
                sections[section_data["Name"]] = existing
                print(f"  ‚Ü™ Using existing section: {section_data['Name']}")
        
        # 4. Create Accessories
        print("üîß Creating accessories...")
        accessories_data = [
            {
                "Name": "Main Signal",
                "CategoryId": categories["Signals"].Id,
                "ControlType": "onOff",
                "Address": "101",
                "IsActive": True,
                "SectionId": sections["Mainline East"].Id
            },
            {
                "Name": "Yard Light 1",
                "CategoryId": categories["Lights"].Id,
                "ControlType": "onOff", 
                "Address": "201",
                "IsActive": True,
                "SectionId": sections["Bypass Section"].Id
            },
            {
                "Name": "Yard Light 2",
                "CategoryId": categories["Lights"].Id,
                "ControlType": "toggle",
                "Address": "202", 
                "IsActive": True,
                "SectionId": sections["Siding Section"].Id
            },
            {
                "Name": "Station House",
                "CategoryId": categories["Buildings"].Id,
                "ControlType": "timed",
                "Address": "301",
                "IsActive": True,
                "TimedMs": 5000,
                "SectionId": sections["Mainline West"].Id
            },
            {
                "Name": "Switch 1 Motor",
                "CategoryId": categories["Switches"].Id,
                "ControlType": "toggle",
                "Address": "401",
                "IsActive": True,
                "SectionId": sections["Mainline East"].Id
            },
            {
                "Name": "Switch 2 Motor", 
                "CategoryId": categories["Switches"].Id,
                "ControlType": "toggle",
                "Address": "402",
                "IsActive": True,
                "SectionId": sections["Bypass Section"].Id
            },
            {
                "Name": "Switch 3 Motor",
                "CategoryId": categories["Switches"].Id,
                "ControlType": "toggle", 
                "Address": "403",
                "IsActive": True,
                "SectionId": sections["Mainline East"].Id
            }
        ]
        
        accessories = {}
        for acc_data in accessories_data:
            existing = db.query(models.Accessory).filter_by(Name=acc_data["Name"]).first()
            if not existing:
                accessory = models.Accessory(**acc_data)
                db.add(accessory)
                db.flush()
                accessories[acc_data["Name"]] = accessory
                print(f"  ‚úì Created accessory: {acc_data['Name']}")
            else:
                accessories[acc_data["Name"]] = existing
                print(f"  ‚Ü™ Using existing accessory: {acc_data['Name']}")
        
        # 5. Create Switches
        print("üîÄ Creating switches...")
        switches_data = [
            {
                "Name": "Bypass Entry Switch",
                "AccessoryId": accessories["Switch 1 Motor"].Id,
                "SectionId": sections["Mainline East"].Id,
                "Kind": "turnout",
                "DefaultRoute": "straight",
                "Orientation": 45.0,
                "PositionX": 80.0,
                "PositionY": 10.0,
                "PositionZ": 0.0,
                "IsActive": True
            },
            {
                "Name": "Bypass Exit Switch",
                "AccessoryId": accessories["Switch 2 Motor"].Id,
                "SectionId": sections["Bypass Section"].Id,
                "Kind": "turnout",
                "DefaultRoute": "straight", 
                "Orientation": -45.0,
                "PositionX": -80.0,
                "PositionY": 10.0,
                "PositionZ": 0.0,
                "IsActive": True
            },
            {
                "Name": "Siding Switch",
                "AccessoryId": accessories["Switch 3 Motor"].Id,
                "SectionId": sections["Mainline East"].Id,
                "Kind": "turnout",
                "DefaultRoute": "straight",
                "Orientation": -30.0,
                "PositionX": 120.0,
                "PositionY": -20.0,
                "PositionZ": 0.0,
                "IsActive": True
            }
        ]
        
        switches = {}
        for switch_data in switches_data:
            existing = db.query(models.Switch).filter_by(Name=switch_data["Name"]).first()
            if not existing:
                switch = models.Switch(**switch_data)
                db.add(switch)
                db.flush()
                switches[switch_data["Name"]] = switch
                print(f"  ‚úì Created switch: {switch_data['Name']}")
            else:
                switches[switch_data["Name"]] = existing
                print(f"  ‚Ü™ Using existing switch: {switch_data['Name']}")
        
        # 6. Create SectionConnections to form the complete track graph
        print("üîó Creating section connections...")
        connections_data = [
            # Main oval connections
            {
                "FromSectionId": sections["Mainline East"].Id,
                "ToSectionId": sections["Mainline West"].Id,
                "connection_type": "direct",
                "IsBidirectional": True,
                "IsActive": True
            },
            {
                "FromSectionId": sections["Mainline West"].Id,
                "ToSectionId": sections["Mainline East"].Id,
                "connection_type": "direct",
                "IsBidirectional": True,
                "IsActive": True
            },
            # Bypass connections via switches
            {
                "FromSectionId": sections["Mainline East"].Id,
                "ToSectionId": sections["Bypass Section"].Id,
                "connection_type": "switch",
                "SwitchId": switches["Bypass Entry Switch"].Id,
                "IsBidirectional": True,
                "IsActive": True
            },
            {
                "FromSectionId": sections["Bypass Section"].Id,
                "ToSectionId": sections["Mainline West"].Id,
                "connection_type": "switch",
                "SwitchId": switches["Bypass Exit Switch"].Id,
                "IsBidirectional": True,
                "IsActive": True
            },
            # Siding connection via switch
            {
                "FromSectionId": sections["Mainline East"].Id,
                "ToSectionId": sections["Siding Section"].Id,
                "connection_type": "switch",
                "SwitchId": switches["Siding Switch"].Id,
                "IsBidirectional": True,
                "IsActive": True
            }
        ]
        
        for conn_data in connections_data:
            # Check if connection already exists (in either direction)
            existing = db.query(models.SectionConnection).filter(
                ((models.SectionConnection.FromSectionId == conn_data["FromSectionId"]) &
                 (models.SectionConnection.ToSectionId == conn_data["ToSectionId"])) |
                ((models.SectionConnection.FromSectionId == conn_data["ToSectionId"]) &
                 (models.SectionConnection.ToSectionId == conn_data["FromSectionId"]))
            ).first()
            
            if not existing:
                connection = models.SectionConnection(**conn_data)
                db.add(connection)
                from_name = next(name for name, section in sections.items() if section.Id == conn_data["FromSectionId"])
                to_name = next(name for name, section in sections.items() if section.Id == conn_data["ToSectionId"])
                print(f"  ‚úì Created connection: {from_name} ‚Üí {to_name} ({conn_data['connection_type']})")
            else:
                from_name = next(name for name, section in sections.items() if section.Id == conn_data["FromSectionId"])
                to_name = next(name for name, section in sections.items() if section.Id == conn_data["ToSectionId"])
                print(f"  ‚Ü™ Using existing connection: {from_name} ‚Üí {to_name}")
        
        # Commit all changes
        db.commit()
        print("\n‚úÖ Dev database seeding completed successfully!")
        print(f"Created layout with {len(sections)} sections, {len(switches)} switches, and {len(accessories)} accessories")
        print("Track graph includes oval mainline, bypass section, and siding with proper connections.")
        
    except Exception as e:
        db.rollback()
        print(f"\n‚ùå Error during seeding: {e}")
        raise
    finally:
        db.close()


if __name__ == "__main__":
    seed_dev_layout()